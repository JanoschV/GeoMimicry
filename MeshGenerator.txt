using System;
using System.Collections;
using System.Collections.Generic;

using Rhino;
using Rhino.Geometry;

using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

using System.IO;
using System.Linq;
using System.Data;
using System.Drawing;
using System.Reflection;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using System.Runtime.InteropServices;

using Rhino.DocObjects;
using Rhino.Collections;
using GH_IO;
using GH_IO.Serialization;

/// <summary>
/// This class will be instantiated on demand by the Script component.
/// </summary>
public class Script_Instance : GH_ScriptInstance
{
#region Utility functions
  /// <summary>Print a String to the [Out] Parameter of the Script component.</summary>
  /// <param name="text">String to print.</param>
  private void Print(string text) { /* Implementation hidden. */ }
  /// <summary>Print a formatted String to the [Out] Parameter of the Script component.</summary>
  /// <param name="format">String format.</param>
  /// <param name="args">Formatting parameters.</param>
  private void Print(string format, params object[] args) { /* Implementation hidden. */ }
  /// <summary>Print useful information about an object instance to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj) { /* Implementation hidden. */ }
  /// <summary>Print the signatures of all the overloads of a specific method to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj, string method_name) { /* Implementation hidden. */ }
#endregion

#region Members
  /// <summary>Gets the current Rhino document.</summary>
  private readonly RhinoDoc RhinoDocument;
  /// <summary>Gets the Grasshopper document that owns this script.</summary>
  private readonly GH_Document GrasshopperDocument;
  /// <summary>Gets the Grasshopper script component that owns this script.</summary>
  private readonly IGH_Component Component;
  /// <summary>
  /// Gets the current iteration count. The first call to RunScript() is associated with Iteration==0.
  /// Any subsequent call within the same solution will increment the Iteration count.
  /// </summary>
  private readonly int Iteration;
#endregion

  /// <summary>
  /// This procedure contains the user code. Input parameters are provided as regular arguments,
  /// Output parameters as ref arguments. You don't have to assign output parameters,
  /// they will have a default value.
  /// </summary>
  private void RunScript(int xNum, int yNum, List<Point3d> pts, ref object mesh, ref object D, ref object A, ref object B)
  {
    Mesh m = new Mesh();
    Cap = new List<Point3d>();
    Roof = new List<Point3d>();
    for (int i = 0; i < pts.Count; i++)
    {
      m.Vertices.Add(pts[i]);
    }

    for (int i = 0; i <= xNum - 1; i++)
    {
      if(i < xNum - 1)
      {
        for (int j = 0; j < yNum - 1 ; j++)
        {
          int a = j + i * yNum;
          int b = (j + 1) + i * yNum;
          int c = (j + 1) + (i + 1) * yNum;
          int d = j + (i + 1) * yNum;
          m.Faces.AddFace(a, b, c);
          m.Faces.AddFace(a, c, d);
        }
      }
      else
      {
        for (int j = 0; j < yNum - 1 ; j++)
        {
          int a = j + i * yNum;
          int b = (j + 1) + i * yNum;
          int c = (j + 1) + (0 ) * yNum;
          int d = j + (0 ) * yNum;
          m.Faces.AddFace(a, b, c);
          m.Faces.AddFace(a, c, d);
        }

      }

    }
    for (int i = 0; i < pts.Count; i += yNum)
    {
      Cap.Add(pts[i]);
    }

    for (int i = yNum - 1 ; i < pts.Count; i += yNum)
    {
      Roof.Add(pts[i]);
    }

    Cap.Add(pts[0]);
    Roof.Add(pts[yNum - 1]);
    curve = new Polyline(Cap);
    curve2 = new Polyline(Roof);
    m.Compact();

    roof = Mesh.CreateFromClosedPolyline(curve2);
    m.Normals.ComputeNormals();
    mesh = m;
    cap = Mesh.CreateFromClosedPolyline(curve);
    A = roof;
    D = cap;
    B = m.Normals;

  }

  // <Custom additional code> 
  List<Point3d> Cap;
  List<Point3d> Roof;
  Mesh cap;
  Mesh roof;
  Polyline curve;
  Polyline curve2;
  // </Custom additional code> 
}